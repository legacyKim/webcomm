generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model Board {
  id        Int      @id @default(autoincrement())
  board_name String  @unique @db.VarChar(255)
  url_slug   String  @db.VarChar(255)
  seq       Int      @default(autoincrement())
  posts     Post[]

  @@map("boards")
}

model Member {
  id           Int      @id @default(autoincrement())
  user_id      String   @unique @db.VarChar(50)
  email        String   @unique @db.VarChar(100)
  all_posts    Int      @default(0)
  authority    Int      @default(0)
  all_views    Int      @default(0)
  password     String   @db.Text
  user_nickname String? @unique @db.VarChar(50)
  profile      String?  @db.VarChar(255)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @default(now()) @map("updated_at")

  // Relations
  posts          Post[]          @relation("MemberPosts")
  comments       Comment[]       @relation("MemberComments")
  postActions    PostAction[]    @relation("MemberPostActions")
  commentActions CommentAction[] @relation("MemberCommentActions")
  blockedBy      BlockedUser[]   @relation("BlockedBy")
  blockedUsers   BlockedUser[]   @relation("BlockedUsers")
  reportedBy     UserReport[]    @relation("ReportedBy")
  reportedUsers  UserReport[]    @relation("ReportedUsers")

  @@map("members")
}

model Post {
  id           Int      @id @default(autoincrement())
  board_id     Int      @default(1)
  board_name   String   @db.VarChar(255)
  title        String   @db.VarChar(255)
  content      String   @db.Text
  user_id      String   @db.VarChar(50)
  views        Int      @default(0)
  likes        Int      @default(0)
  dislikes     Int      @default(0)
  reports      Int      @default(0)
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now())
  url_slug     String   @db.VarChar(255)
  user_nickname String? @db.VarChar(255)
  
  // Relations
  board        Board    @relation(fields: [board_id], references: [id])
  author       Member   @relation("MemberPosts", fields: [user_id], references: [user_id])
  comments     Comment[]
  postActions  PostAction[]
  images       PostImage[]

  @@map("posts")
}

model Comment {
  id            Int      @id @default(autoincrement())
  post_id       Int
  user_id       String   @db.VarChar(50)
  content       String   @db.Text
  parent_id     Int?
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now())
  likes         Int      @default(0)
  dislikes      Int      @default(0)
  user_nickname String?  @db.VarChar(255)
  is_deleted    Boolean  @default(false)
  deleted_at    DateTime?

  // Relations
  post         Post     @relation(fields: [post_id], references: [id])
  author       Member   @relation("MemberComments", fields: [user_id], references: [user_id])
  parent       Comment? @relation("CommentReplies", fields: [parent_id], references: [id])
  replies      Comment[] @relation("CommentReplies")
  actions      CommentAction[]

  @@map("comments")
}

model PostAction {
  id          Int      @id @default(autoincrement())
  post_id     Int
  user_id     Int
  action_type String   @db.VarChar(50)
  created_at  DateTime @default(now())

  // Relations
  post        Post     @relation(fields: [post_id], references: [id])
  user        Member   @relation("MemberPostActions", fields: [user_id], references: [id])

  @@unique([post_id, user_id, action_type])
  @@map("post_actions")
}

model CommentAction {
  id          Int      @id @default(autoincrement())
  comment_id  Int
  user_id     Int
  action_type String   @db.Text
  reason      String?  @db.Text
  created_at  DateTime @default(now())

  // Relations
  comment     Comment  @relation(fields: [comment_id], references: [id])
  user        Member   @relation("MemberCommentActions", fields: [user_id], references: [id])

  @@unique([comment_id, user_id, action_type])
  @@map("comment_actions")
}

model PostImage {
  id         Int      @id @default(autoincrement())
  post_id    Int
  image_url  String   @db.Text
  created_at DateTime @default(now())

  // Relations
  post       Post     @relation(fields: [post_id], references: [id])

  @@map("post_images")
}

model BlockedUser {
  id        Int      @id @default(autoincrement())
  blockerId String   @db.VarChar(50)
  blockedId String   @db.VarChar(50)
  createdAt DateTime @default(now()) @map("created_at")
  blocker   Member   @relation("BlockedBy", fields: [blockerId], references: [user_id])
  blocked   Member   @relation("BlockedUsers", fields: [blockedId], references: [user_id])

  @@unique([blockerId, blockedId])
  @@map("blocked_users")
}

model UserReport {
  id         Int      @id @default(autoincrement())
  reporterId String   @db.VarChar(50)
  reportedId String   @db.VarChar(50)
  reason     String
  createdAt  DateTime @default(now()) @map("created_at")
  reporter   Member   @relation("ReportedBy", fields: [reporterId], references: [user_id])
  reported   Member   @relation("ReportedUsers", fields: [reportedId], references: [user_id])

  @@map("user_reports")
} 