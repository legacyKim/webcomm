generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model Board {
  id          Int          @id @default(autoincrement())
  board_name  String       @unique @db.VarChar(255)
  url_slug    String       @unique @db.VarChar(255)
  seq         Int          @default(autoincrement())
  menuCustoms MenuCustom[]
  posts       Post[]

  @@map("boards")
}

model Member {
  id                    Int                @id @default(autoincrement())
  username              String             @unique @db.VarChar(50)
  email                 String             @unique @db.VarChar(100)
  all_posts             Int                @default(0)
  authority             Int                @default(0)
  all_views             Int                @default(0)
  password              String
  user_nickname         String?            @unique @db.VarChar(50)
  profile               String?            @db.VarChar(255)
  createdAt             DateTime           @default(now()) @map("created_at")
  updatedAt             DateTime           @default(now()) @updatedAt @map("updated_at")
  nickname_updated_at   DateTime?          @map("nickname_updated_at")
  restriction_until     DateTime?          @map("restriction_until")
  bio                   String?
  location              String?            @db.VarChar(100)
  website               String?            @db.VarChar(255)
  banner_image          String?            @db.VarChar(255)
  total_likes_received  Int                @default(0)
  last_seen             DateTime?          @map("last_seen")
  is_online             Boolean            @default(false)
  account_locked_until  DateTime?          @map("account_locked_until")
  failed_login_attempts Int                @default(0)
  last_failed_login     DateTime?          @map("last_failed_login")
  lock_count            Int                @default(0)
  permanent_lock        Boolean            @default(false)
  marketing_enabled     Boolean            @default(false)
  notification_enabled  Boolean            @default(false)
  email_updated_at      DateTime?          @map("email_updated_at")
  blockedUsers          BlockedUser[]      @relation("BlockedUsers")
  blockedBy             BlockedUser[]      @relation("BlockedBy")
  commentActions        CommentAction[]    @relation("MemberCommentActions")
  comments              Comment[]          @relation("MemberComments")
  following             Follow[]           @relation("UserFollowing")
  followers             Follow[]           @relation("UserFollowers")
  menuCustoms           MenuCustom[]
  receivedNotifications Notification[]     @relation("NotificationReceiver")
  sentNotifications     Notification[]     @relation("NotificationSender")
  postActions           PostAction[]       @relation("MemberPostActions")
  posts                 Post[]             @relation("MemberPosts")
  pushSubscriptions     PushSubscription[]
  receivedMessages      UserMessage[]      @relation("ReceivedMessages")
  sentMessages          UserMessage[]      @relation("SentMessages")
  reportedUsers         UserReport[]       @relation("ReportedUsers")
  reportedBy            UserReport[]       @relation("ReportedBy")
  reports               Report[]

  @@map("members")
}

model Post {
  id            Int            @id @default(autoincrement())
  board_id      Int            @default(1)
  board_name    String         @db.VarChar(255)
  title         String         @db.VarChar(255)
  content       String
  user_id       Int
  views         Int            @default(0)
  likes         Int            @default(0)
  dislikes      Int            @default(0)
  reports       Int            @default(0)
  created_at    DateTime       @default(now())
  updated_at    DateTime       @default(now())
  url_slug      String         @db.VarChar(255)
  user_nickname String?        @db.VarChar(255)
  deleted       Boolean        @default(false)
  notice        Boolean        @default(false)
  comments      Comment[]
  notifications Notification[]
  postActions   PostAction[]
  images        PostImage[]
  reportList    Report[]
  board         Board          @relation(fields: [board_id], references: [id])
  author        Member         @relation("MemberPosts", fields: [user_id], references: [id])

  @@map("posts")
}

model Comment {
  id            Int             @id @default(autoincrement())
  post_id       Int
  user_id       Int
  content       String
  parent_id     Int?
  created_at    DateTime        @default(now())
  updated_at    DateTime        @default(now())
  likes         Int             @default(0)
  dislikes      Int             @default(0)
  user_nickname String?         @db.VarChar(255)
  depth         Int
  is_deleted    Boolean         @default(false)
  deleted_at    DateTime?
  actions       CommentAction[]
  parent        Comment?        @relation("CommentReplies", fields: [parent_id], references: [id])
  replies       Comment[]       @relation("CommentReplies")
  post          Post            @relation(fields: [post_id], references: [id])
  author        Member          @relation("MemberComments", fields: [user_id], references: [id])
  notifications Notification[]

  @@map("comments")
}

model PostAction {
  id          Int      @id @default(autoincrement())
  post_id     Int
  user_id     Int
  action_type String   @db.VarChar(50)
  created_at  DateTime @default(now())
  post        Post     @relation(fields: [post_id], references: [id])
  user        Member   @relation("MemberPostActions", fields: [user_id], references: [id])

  @@unique([post_id, user_id, action_type])
  @@map("post_actions")
}

model CommentAction {
  id          Int      @id @default(autoincrement())
  comment_id  Int
  user_id     Int
  action_type String
  reason      String?
  created_at  DateTime @default(now())
  comment     Comment  @relation(fields: [comment_id], references: [id])
  user        Member   @relation("MemberCommentActions", fields: [user_id], references: [id])

  @@unique([comment_id, user_id, action_type])
  @@map("comment_actions")
}

model PostImage {
  id         Int      @id @default(autoincrement())
  post_id    Int
  image_url  String
  created_at DateTime @default(now())
  post       Post     @relation(fields: [post_id], references: [id])

  @@map("post_images")
}

model BlockedUser {
  id        Int      @id @default(autoincrement())
  blockerId Int
  blockedId Int
  createdAt DateTime @default(now()) @map("created_at")
  blocked   Member   @relation("BlockedUsers", fields: [blockedId], references: [id])
  blocker   Member   @relation("BlockedBy", fields: [blockerId], references: [id])

  @@unique([blockerId, blockedId])
  @@map("blocked_users")
}

model UserReport {
  id         Int      @id @default(autoincrement())
  reporterId Int
  reportedId Int
  reason     String
  createdAt  DateTime @default(now()) @map("created_at")
  type       String   @default("general")
  reported   Member   @relation("ReportedUsers", fields: [reportedId], references: [id])
  reporter   Member   @relation("ReportedBy", fields: [reporterId], references: [id])

  @@map("user_reports")
}

model UserMessage {
  id                     Int      @id @default(autoincrement())
  sender_id              Int      @map("sender_id")
  receiver_id            Int      @map("receiver_id")
  content                String
  isRead                 Boolean  @default(false) @map("is_read")
  createdAt              DateTime @default(now()) @map("created_at")
  is_deleted_by_sender   Boolean  @default(false)
  is_deleted_by_receiver Boolean  @default(false)
  receiver               Member   @relation("ReceivedMessages", fields: [receiver_id], references: [id])
  sender                 Member   @relation("SentMessages", fields: [sender_id], references: [id])

  @@map("user_messages")
}

model Notification {
  id          Int      @id @default(autoincrement())
  type        String
  sender_id   Int
  receiver_id Int
  post_id     Int?
  comment_id  Int?
  url_slug    String?
  is_read     Boolean  @default(false)
  created_at  DateTime @default(now())
  comment     Comment? @relation(fields: [comment_id], references: [id])
  post        Post?    @relation(fields: [post_id], references: [id])
  receiver    Member   @relation("NotificationReceiver", fields: [receiver_id], references: [id])
  sender      Member   @relation("NotificationSender", fields: [sender_id], references: [id])

  @@map("notifications")
}

model PushSubscription {
  id         Int      @id @default(autoincrement())
  user_id    Int
  endpoint   String   @unique
  p256dh     String
  auth       String
  created_at DateTime @default(now())
  user       Member   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, endpoint])
  @@map("push_subscriptions")
}

model Terms {
  id         Int      @id @default(autoincrement())
  content    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("terms")
}

model Policy {
  id         Int      @id @default(autoincrement())
  content    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("policy")
}

model SiteSettings {
  id         Int      @id @default(autoincrement())
  logo_url   String?  @db.VarChar(255)
  site_name  String?  @db.VarChar(100)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("site_settings")
}

model Follow {
  id           Int      @id @default(autoincrement())
  follower_id  Int
  following_id Int
  created_at   DateTime @default(now())
  follower     Member   @relation("UserFollowing", fields: [follower_id], references: [id], onDelete: Cascade)
  following    Member   @relation("UserFollowers", fields: [following_id], references: [id], onDelete: Cascade)

  @@unique([follower_id, following_id], name: "unique_follow")
  @@map("follows")
}

model MenuCustom {
  id         Int      @id @default(autoincrement())
  user_id    Int
  board_id   Int
  priority   Int      @default(0)
  is_visible Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  board      Board    @relation(fields: [board_id], references: [id], onDelete: Cascade)
  user       Member   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, board_id], name: "unique_user_board")
  @@map("menu_customs")
}

model Report {
  id         Int      @id @default(autoincrement())
  user_id    Int
  post_id    Int
  reason     String   @db.VarChar(500)
  created_at DateTime @default(now())
  post       Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user       Member   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, post_id], name: "unique_user_post_report")
  @@map("reports")
}
